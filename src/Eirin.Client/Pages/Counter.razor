@using Eirin.gRPC
@using Grpc.Net.Client

@page "/counter"

@inject GrpcChannel Channel


<PageTitle>Counter</PageTitle>

<h1>Counter</h1>
<InputFile OnChange="OnInputFileChange" multiple/>
<InputFile OnChange="OnInputFileChange2" multiple/>

<div class="card" style="width:30rem;">
    <div class="card-body">
        @foreach (var imageDataUrl in imageDataUrls)
        {
            <img class="rounded m-1" src="@imageDataUrl" />
        }
    </div>
</div>

@code {
    private List<string> imageDataUrls = new List<string>();

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        imageDataUrls.Clear();

        var format = "image/png";

        foreach (var imageFile in e.GetMultipleFiles(1000))
        {
            // 100*100の画像にリサイズ
            var resizedImageFile = await imageFile.RequestImageFileAsync(format, 1100, 1100);
            var buffer = new byte[resizedImageFile.Size];
            await resizedImageFile.OpenReadStream(999999999999999).ReadAsync(buffer);
            // ブラウザ上に表示するためにDataUrlに変換
            var imageDataUrl =
                $"data:{format};base64,{Convert.ToBase64String(buffer)}";
            imageDataUrls.Add(imageDataUrl);

        }

        StateHasChanged();
    }

    private async Task OnInputFileChange2(InputFileChangeEventArgs e)
    {
        imageDataUrls.Clear();

        var format = "image/png";

        foreach (var imageFile in e.GetMultipleFiles(1000))
        {
            // 100*100の画像にリサイズ
            var resizedImageFile = await imageFile.RequestImageFileAsync(format, 1000, 1000);
            var buffer = new byte[resizedImageFile.Size];
            await resizedImageFile.OpenReadStream(999999999999999).ReadAsync(buffer);
            // ブラウザ上に表示するためにDataUrlに変換
            var imageDataUrl =
                $"data:{format};base64,{Convert.ToBase64String(buffer)}";
            imageDataUrls.Add(imageDataUrl);

            StateHasChanged();
        }
    }
}
